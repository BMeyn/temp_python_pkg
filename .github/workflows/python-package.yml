# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: true
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - uses: TrueBrain/actions-flake8@v2
      with:
       path: .

    #- name: Lint with flake8
     # run: |
        # stop the build if there are Python syntax errors or undefined names
     #   flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: generate pydocs
      run: |
        cd src
        mkdir -p ../docs
        handsdown -o ../docs

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
    
    - name: Test with pytest
      run: |
        pytest --cov=src test/ --junitxml=out_report.xml --cov-report xml
    
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: "out_report.xml"
  
    - uses: codecov/codecov-action@v2
      with:
        files: coverage.xml
        token: ${{ secrets.codecov_token }}
        flags: unittests # optional
        name: codecov-umbrella # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)
    
    - name: build python package
      run: |
        python setup.py bdist_wheel
        python setup.py sdist

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: py-pkg-build-artifact
        path: |
          dist


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: py-pkg-build-artifact

    - name: Check artifacts
      run: ls

    - name: Publish distribution ðŸ“¦ to Test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_test_token }}
        repository_url: https://test.pypi.org/legacy/
        packages_dir: .

    - name: Publish distribution ðŸ“¦ to PyPI
      #if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_token }}
        packages_dir: .
